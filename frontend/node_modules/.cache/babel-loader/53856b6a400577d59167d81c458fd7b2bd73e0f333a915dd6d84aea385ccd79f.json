{"ast":null,"code":"var _jsxFileName = \"/home/joralgra/00_Projects/C2LoadSim/frontend/src/contexts/WebSocketProvider.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebSocketContext = /*#__PURE__*/createContext(undefined);\nexport const useWebSocket = () => {\n  _s();\n  const context = useContext(WebSocketContext);\n  if (context === undefined) {\n    throw new Error('useWebSocket must be used within a WebSocketProvider');\n  }\n  return context;\n};\n_s(useWebSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const WebSocketProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [latestData, setLatestData] = useState(null);\n  const [connectionError, setConnectionError] = useState(null);\n  useEffect(() => {\n    var _process$env$REACT_AP;\n    const SOCKET_SERVER_URL = ((_process$env$REACT_AP = process.env.REACT_APP_API_BASE_URL) === null || _process$env$REACT_AP === void 0 ? void 0 : _process$env$REACT_AP.replace('/api', '')) || 'http://localhost:5000';\n    console.log('Connecting to WebSocket server:', SOCKET_SERVER_URL);\n    const newSocket = io(SOCKET_SERVER_URL, {\n      transports: ['polling', 'websocket'],\n      upgrade: true,\n      rememberUpgrade: true\n    });\n\n    // Connection event handlers\n    newSocket.on('connect', () => {\n      console.log('WebSocket connected');\n      setIsConnected(true);\n      setConnectionError(null);\n\n      // Join the simulation updates room\n      newSocket.emit('join_simulation');\n    });\n    newSocket.on('disconnect', reason => {\n      console.log('WebSocket disconnected:', reason);\n      setIsConnected(false);\n      if (reason === 'io server disconnect') {\n        // The disconnection was initiated by the server, reconnect manually\n        newSocket.connect();\n      }\n    });\n    newSocket.on('connect_error', error => {\n      console.error('WebSocket connection error:', error);\n      setConnectionError(`Connection failed: ${error.message}`);\n    });\n\n    // Application-specific event handlers\n    newSocket.on('connected', data => {\n      console.log('WebSocket server says:', data.message);\n    });\n    newSocket.on('joined_simulation', data => {\n      console.log('Joined simulation updates:', data.message);\n    });\n    newSocket.on('simulation_update', data => {\n      console.log('Received simulation update:', data);\n      setLatestData(data);\n    });\n\n    // Reconnection event handlers\n    newSocket.on('reconnect', attemptNumber => {\n      console.log('WebSocket reconnected after', attemptNumber, 'attempts');\n      setIsConnected(true);\n      setConnectionError(null);\n    });\n    newSocket.on('reconnect_error', error => {\n      console.error('WebSocket reconnection error:', error);\n      setConnectionError(`Reconnection failed: ${error.message}`);\n    });\n    setSocket(newSocket);\n\n    // Cleanup on unmount\n    return () => {\n      console.log('Cleaning up WebSocket connection');\n      newSocket.off('connect');\n      newSocket.off('disconnect');\n      newSocket.off('connect_error');\n      newSocket.off('connected');\n      newSocket.off('joined_simulation');\n      newSocket.off('simulation_update');\n      newSocket.off('reconnect');\n      newSocket.off('reconnect_error');\n      newSocket.close();\n    };\n  }, []);\n  const contextValue = {\n    socket,\n    isConnected,\n    latestData,\n    connectionError\n  };\n  return /*#__PURE__*/_jsxDEV(WebSocketContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n_s2(WebSocketProvider, \"WSmXMUJ3N8eLHo59+2e8C8W17ag=\");\n_c = WebSocketProvider;\nexport default WebSocketProvider;\nvar _c;\n$RefreshReg$(_c, \"WebSocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","jsxDEV","_jsxDEV","WebSocketContext","undefined","useWebSocket","_s","context","Error","WebSocketProvider","children","_s2","socket","setSocket","isConnected","setIsConnected","latestData","setLatestData","connectionError","setConnectionError","_process$env$REACT_AP","SOCKET_SERVER_URL","process","env","REACT_APP_API_BASE_URL","replace","console","log","newSocket","transports","upgrade","rememberUpgrade","on","emit","reason","connect","error","message","data","attemptNumber","off","close","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/joralgra/00_Projects/C2LoadSim/frontend/src/contexts/WebSocketProvider.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { io, Socket } from 'socket.io-client';\nimport { SimulationStatus, QueueStats, WorkerStats } from '../api/simulatorAPI';\n\ninterface SocketData {\n  status: SimulationStatus;\n  queue_stats: QueueStats;\n  worker_stats: WorkerStats[];\n  timestamp: number;\n}\n\ninterface WebSocketContextType {\n  socket: Socket | null;\n  isConnected: boolean;\n  latestData: SocketData | null;\n  connectionError: string | null;\n}\n\nconst WebSocketContext = createContext<WebSocketContextType | undefined>(undefined);\n\nexport const useWebSocket = () => {\n  const context = useContext(WebSocketContext);\n  if (context === undefined) {\n    throw new Error('useWebSocket must be used within a WebSocketProvider');\n  }\n  return context;\n};\n\ninterface WebSocketProviderProps {\n  children: ReactNode;\n}\n\nexport const WebSocketProvider: React.FC<WebSocketProviderProps> = ({ children }) => {\n  const [socket, setSocket] = useState<Socket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [latestData, setLatestData] = useState<SocketData | null>(null);\n  const [connectionError, setConnectionError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const SOCKET_SERVER_URL = process.env.REACT_APP_API_BASE_URL?.replace('/api', '') || 'http://localhost:5000';\n    \n    console.log('Connecting to WebSocket server:', SOCKET_SERVER_URL);\n    \n    const newSocket = io(SOCKET_SERVER_URL, {\n      transports: ['polling', 'websocket'],\n      upgrade: true,\n      rememberUpgrade: true\n    });\n\n    // Connection event handlers\n    newSocket.on('connect', () => {\n      console.log('WebSocket connected');\n      setIsConnected(true);\n      setConnectionError(null);\n      \n      // Join the simulation updates room\n      newSocket.emit('join_simulation');\n    });\n\n    newSocket.on('disconnect', (reason) => {\n      console.log('WebSocket disconnected:', reason);\n      setIsConnected(false);\n      if (reason === 'io server disconnect') {\n        // The disconnection was initiated by the server, reconnect manually\n        newSocket.connect();\n      }\n    });\n\n    newSocket.on('connect_error', (error) => {\n      console.error('WebSocket connection error:', error);\n      setConnectionError(`Connection failed: ${error.message}`);\n    });\n\n    // Application-specific event handlers\n    newSocket.on('connected', (data) => {\n      console.log('WebSocket server says:', data.message);\n    });\n\n    newSocket.on('joined_simulation', (data) => {\n      console.log('Joined simulation updates:', data.message);\n    });\n\n    newSocket.on('simulation_update', (data: SocketData) => {\n      console.log('Received simulation update:', data);\n      setLatestData(data);\n    });\n\n    // Reconnection event handlers\n    newSocket.on('reconnect', (attemptNumber) => {\n      console.log('WebSocket reconnected after', attemptNumber, 'attempts');\n      setIsConnected(true);\n      setConnectionError(null);\n    });\n\n    newSocket.on('reconnect_error', (error) => {\n      console.error('WebSocket reconnection error:', error);\n      setConnectionError(`Reconnection failed: ${error.message}`);\n    });\n\n    setSocket(newSocket);\n\n    // Cleanup on unmount\n    return () => {\n      console.log('Cleaning up WebSocket connection');\n      newSocket.off('connect');\n      newSocket.off('disconnect');\n      newSocket.off('connect_error');\n      newSocket.off('connected');\n      newSocket.off('joined_simulation');\n      newSocket.off('simulation_update');\n      newSocket.off('reconnect');\n      newSocket.off('reconnect_error');\n      newSocket.close();\n    };\n  }, []);\n\n  const contextValue: WebSocketContextType = {\n    socket,\n    isConnected,\n    latestData,\n    connectionError,\n  };\n\n  return (\n    <WebSocketContext.Provider value={contextValue}>\n      {children}\n    </WebSocketContext.Provider>\n  );\n};\n\nexport default WebSocketProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}