{"ast":null,"code":"/**\n * API handler for backend communication\n * \n * Provides functions to interact with the C2LoadSim backend API\n */\n\nimport axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api';\n\n// Types\n\nclass SimulatorAPI {\n  constructor() {\n    this.axiosInstance = axios.create({\n      baseURL: API_BASE_URL,\n      timeout: 10000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    // Add response interceptor for error handling\n    this.axiosInstance.interceptors.response.use(response => response, error => {\n      console.error('API Error:', error);\n      throw error;\n    });\n  }\n\n  // Health check\n  async healthCheck() {\n    const response = await this.axiosInstance.get('/health');\n    return response.data;\n  }\n\n  // Simulation control\n  async startSimulation(config) {\n    const response = await this.axiosInstance.post('/simulation/start', config);\n    return response.data;\n  }\n  async getSimulationStatus() {\n    const response = await this.axiosInstance.get('/simulation/status');\n    return response.data;\n  }\n  async stopSimulation() {\n    const response = await this.axiosInstance.post('/simulation/stop');\n    return response.data;\n  }\n  async resetSimulation() {\n    const response = await this.axiosInstance.post('/simulation/reset');\n    return response.data;\n  }\n\n  // Scenario management\n  async uploadScenario(file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await this.axiosInstance.post('/scenarios/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n  async listScenarios() {\n    const response = await this.axiosInstance.get('/scenarios/list');\n    return response.data;\n  }\n  async getScenario(filename) {\n    const response = await this.axiosInstance.get(`/scenarios/${filename}`);\n    return response.data;\n  }\n\n  // Data retrieval\n  async getLogSummary() {\n    const response = await this.axiosInstance.get('/data/logs/summary');\n    return response.data;\n  }\n  async downloadJSONLogs() {\n    const response = await this.axiosInstance.get('/data/logs/json', {\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n  async downloadCSVLogs() {\n    const response = await this.axiosInstance.get('/data/logs/csv', {\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n  async getQueueStats() {\n    const response = await this.axiosInstance.get('/data/queue/stats');\n    return response.data;\n  }\n  async getWorkerStats() {\n    const response = await this.axiosInstance.get('/data/workers/stats');\n    return response.data;\n  }\n\n  // Utility methods\n  downloadFile(blob, filename) {\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    window.URL.revokeObjectURL(url);\n  }\n}\n\n// Export singleton instance\nexport const simulatorAPI = new SimulatorAPI();\nexport default simulatorAPI;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","SimulatorAPI","constructor","axiosInstance","create","baseURL","timeout","headers","interceptors","response","use","error","console","healthCheck","get","data","startSimulation","config","post","getSimulationStatus","stopSimulation","resetSimulation","uploadScenario","file","formData","FormData","append","listScenarios","getScenario","filename","getLogSummary","downloadJSONLogs","responseType","downloadCSVLogs","getQueueStats","getWorkerStats","downloadFile","blob","url","window","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","simulatorAPI"],"sources":["/home/joralgra/00_Projects/C2LoadSim/frontend/src/api/simulatorAPI.ts"],"sourcesContent":["/**\n * API handler for backend communication\n * \n * Provides functions to interact with the C2LoadSim backend API\n */\n\nimport axios, { AxiosResponse } from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api';\n\n// Types\nexport interface SimulationStatus {\n  running: boolean;\n  paused: boolean;\n  simulation_time: number;\n  total_jobs_created: number;\n  queue_length: number;\n  active_workers: number;\n}\n\nexport interface QueueStats {\n  queue_length: number;\n  max_queue_size: number;\n  queue_utilization: number;\n  completed_jobs: number;\n  failed_jobs: number;\n  total_jobs_processed: number;\n  success_rate: number;\n  use_priority_queue: boolean;\n}\n\nexport interface WorkerStats {\n  worker_id: string;\n  status: string;\n  processing_speed: number;\n  failure_rate: number;\n  current_jobs: number;\n  utilization: number;\n  completed_jobs: number;\n  failed_jobs: number;\n  success_rate: number;\n  average_processing_time: number;\n  uptime_seconds: number;\n}\n\nexport interface ScenarioConfig {\n  name: string;\n  description?: string;\n  duration: number;\n  num_workers?: number;\n  queue_config?: any;\n  worker_config?: {\n    processing_speed?: number;\n    failure_rate?: number;\n    efficiency_variance?: number;\n    max_concurrent_jobs?: number;\n  };\n  job_generation?: any;\n}\n\nexport interface SimulationConfig {\n  scenario: ScenarioConfig;\n  log_directory?: string;\n}\n\nclass SimulatorAPI {\n  private axiosInstance = axios.create({\n    baseURL: API_BASE_URL,\n    timeout: 10000,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  constructor() {\n    // Add response interceptor for error handling\n    this.axiosInstance.interceptors.response.use(\n      (response) => response,\n      (error) => {\n        console.error('API Error:', error);\n        throw error;\n      }\n    );\n  }\n\n  // Health check\n  async healthCheck(): Promise<{ status: string; message: string }> {\n    const response: AxiosResponse = await this.axiosInstance.get('/health');\n    return response.data;\n  }\n\n  // Simulation control\n  async startSimulation(config: SimulationConfig): Promise<SimulationStatus> {\n    const response: AxiosResponse = await this.axiosInstance.post('/simulation/start', config);\n    return response.data;\n  }\n\n  async getSimulationStatus(): Promise<SimulationStatus> {\n    const response: AxiosResponse = await this.axiosInstance.get('/simulation/status');\n    return response.data;\n  }\n\n  async stopSimulation(): Promise<{ message: string }> {\n    const response: AxiosResponse = await this.axiosInstance.post('/simulation/stop');\n    return response.data;\n  }\n\n  async resetSimulation(): Promise<{ message: string }> {\n    const response: AxiosResponse = await this.axiosInstance.post('/simulation/reset');\n    return response.data;\n  }\n\n  // Scenario management\n  async uploadScenario(file: File): Promise<{ message: string; filename: string; scenario_name: string }> {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    const response: AxiosResponse = await this.axiosInstance.post('/scenarios/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  }\n\n  async listScenarios(): Promise<{ scenarios: Array<{ filename: string; name: string; description: string; duration: number }> }> {\n    const response: AxiosResponse = await this.axiosInstance.get('/scenarios/list');\n    return response.data;\n  }\n\n  async getScenario(filename: string): Promise<ScenarioConfig> {\n    const response: AxiosResponse = await this.axiosInstance.get(`/scenarios/${filename}`);\n    return response.data;\n  }\n\n  // Data retrieval\n  async getLogSummary(): Promise<any> {\n    const response: AxiosResponse = await this.axiosInstance.get('/data/logs/summary');\n    return response.data;\n  }\n\n  async downloadJSONLogs(): Promise<Blob> {\n    const response: AxiosResponse = await this.axiosInstance.get('/data/logs/json', {\n      responseType: 'blob',\n    });\n    return response.data;\n  }\n\n  async downloadCSVLogs(): Promise<Blob> {\n    const response: AxiosResponse = await this.axiosInstance.get('/data/logs/csv', {\n      responseType: 'blob',\n    });\n    return response.data;\n  }\n\n  async getQueueStats(): Promise<QueueStats> {\n    const response: AxiosResponse = await this.axiosInstance.get('/data/queue/stats');\n    return response.data;\n  }\n\n  async getWorkerStats(): Promise<{ workers: WorkerStats[] }> {\n    const response: AxiosResponse = await this.axiosInstance.get('/data/workers/stats');\n    return response.data;\n  }\n\n  // Utility methods\n  downloadFile(blob: Blob, filename: string): void {\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    window.URL.revokeObjectURL(url);\n  }\n}\n\n// Export singleton instance\nexport const simulatorAPI = new SimulatorAPI();\n\nexport default simulatorAPI;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}